Net(
  (encoder_blocks): ModuleList(
    (0): AdaptSimpleBlock(
      (AdaptConv): AdaptiveConv(
        (conv0): Conv2d(8, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (conv1): Conv2d(64, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn0): BatchNorm2d(64, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
        (leaky_relu): LeakyReLU(negative_slope=0.1)
      )
      (batch_norm_conv): BatchNormBlock(in_feat: 64, momentum: 0.020, only_bias: False)
      (leaky_relu): LeakyReLU(negative_slope=0.1)
    )
    (1): AdaptResnetBottleneckBlock(
      (unary1): UnaryBlock(in_feat: 64, out_feat: 32, BN: True, ReLU: True)
      (AdaptConv): AdaptiveConv(
        (conv0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (conv1): Conv2d(32, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn0): BatchNorm2d(32, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
        (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
        (leaky_relu): LeakyReLU(negative_slope=0.1)
      )
      (batch_norm_conv): BatchNormBlock(in_feat: 32, momentum: 0.020, only_bias: False)
      (unary2): UnaryBlock(in_feat: 32, out_feat: 128, BN: True, ReLU: False)
      (unary_shortcut): UnaryBlock(in_feat: 64, out_feat: 128, BN: True, ReLU: False)
      (leaky_relu): LeakyReLU(negative_slope=0.1)
    )
    (2): AdaptResnetBottleneckBlock(
      (unary1): UnaryBlock(in_feat: 128, out_feat: 32, BN: True, ReLU: True)
      (AdaptConv): AdaptiveConv(
        (conv0): Conv2d(32, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (conv1): Conv2d(32, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn0): BatchNorm2d(32, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
        (bn1): BatchNorm2d(32, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
        (leaky_relu): LeakyReLU(negative_slope=0.1)
      )
      (batch_norm_conv): BatchNormBlock(in_feat: 32, momentum: 0.020, only_bias: False)
      (unary2): UnaryBlock(in_feat: 32, out_feat: 128, BN: True, ReLU: False)
      (unary_shortcut): Identity()
      (leaky_relu): LeakyReLU(negative_slope=0.1)
    )
    (3): AdaptResnetBottleneckBlock(
      (unary1): UnaryBlock(in_feat: 128, out_feat: 64, BN: True, ReLU: True)
      (AdaptConv): AdaptiveConv(
        (conv0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (conv1): Conv2d(64, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn0): BatchNorm2d(64, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
        (leaky_relu): LeakyReLU(negative_slope=0.1)
      )
      (batch_norm_conv): BatchNormBlock(in_feat: 64, momentum: 0.020, only_bias: False)
      (unary2): UnaryBlock(in_feat: 64, out_feat: 256, BN: True, ReLU: False)
      (unary_shortcut): UnaryBlock(in_feat: 128, out_feat: 256, BN: True, ReLU: False)
      (leaky_relu): LeakyReLU(negative_slope=0.1)
    )
    (4): AdaptResnetBottleneckBlock(
      (unary1): UnaryBlock(in_feat: 256, out_feat: 64, BN: True, ReLU: True)
      (AdaptConv): AdaptiveConv(
        (conv0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (conv1): Conv2d(64, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn0): BatchNorm2d(64, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
        (leaky_relu): LeakyReLU(negative_slope=0.1)
      )
      (batch_norm_conv): BatchNormBlock(in_feat: 64, momentum: 0.020, only_bias: False)
      (unary2): UnaryBlock(in_feat: 64, out_feat: 256, BN: True, ReLU: False)
      (unary_shortcut): Identity()
      (leaky_relu): LeakyReLU(negative_slope=0.1)
    )
    (5): AdaptResnetBottleneckBlock(
      (unary1): UnaryBlock(in_feat: 256, out_feat: 64, BN: True, ReLU: True)
      (AdaptConv): AdaptiveConv(
        (conv0): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (conv1): Conv2d(64, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn0): BatchNorm2d(64, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
        (leaky_relu): LeakyReLU(negative_slope=0.1)
      )
      (batch_norm_conv): BatchNormBlock(in_feat: 64, momentum: 0.020, only_bias: False)
      (unary2): UnaryBlock(in_feat: 64, out_feat: 256, BN: True, ReLU: False)
      (unary_shortcut): Identity()
      (leaky_relu): LeakyReLU(negative_slope=0.1)
    )
    (6): AdaptResnetBottleneckBlock(
      (unary1): UnaryBlock(in_feat: 256, out_feat: 128, BN: True, ReLU: True)
      (AdaptConv): AdaptiveConv(
        (conv0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (conv1): Conv2d(128, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn0): BatchNorm2d(128, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
        (leaky_relu): LeakyReLU(negative_slope=0.1)
      )
      (batch_norm_conv): BatchNormBlock(in_feat: 128, momentum: 0.020, only_bias: False)
      (unary2): UnaryBlock(in_feat: 128, out_feat: 512, BN: True, ReLU: False)
      (unary_shortcut): UnaryBlock(in_feat: 256, out_feat: 512, BN: True, ReLU: False)
      (leaky_relu): LeakyReLU(negative_slope=0.1)
    )
    (7): AdaptResnetBottleneckBlock(
      (unary1): UnaryBlock(in_feat: 512, out_feat: 128, BN: True, ReLU: True)
      (AdaptConv): AdaptiveConv(
        (conv0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (conv1): Conv2d(128, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn0): BatchNorm2d(128, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
        (leaky_relu): LeakyReLU(negative_slope=0.1)
      )
      (batch_norm_conv): BatchNormBlock(in_feat: 128, momentum: 0.020, only_bias: False)
      (unary2): UnaryBlock(in_feat: 128, out_feat: 512, BN: True, ReLU: False)
      (unary_shortcut): Identity()
      (leaky_relu): LeakyReLU(negative_slope=0.1)
    )
    (8): AdaptResnetBottleneckBlock(
      (unary1): UnaryBlock(in_feat: 512, out_feat: 128, BN: True, ReLU: True)
      (AdaptConv): AdaptiveConv(
        (conv0): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (conv1): Conv2d(128, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn0): BatchNorm2d(128, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
        (leaky_relu): LeakyReLU(negative_slope=0.1)
      )
      (batch_norm_conv): BatchNormBlock(in_feat: 128, momentum: 0.020, only_bias: False)
      (unary2): UnaryBlock(in_feat: 128, out_feat: 512, BN: True, ReLU: False)
      (unary_shortcut): Identity()
      (leaky_relu): LeakyReLU(negative_slope=0.1)
    )
    (9): AdaptResnetBottleneckBlock(
      (unary1): UnaryBlock(in_feat: 512, out_feat: 256, BN: True, ReLU: True)
      (AdaptConv): AdaptiveConv(
        (conv0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (conv1): Conv2d(256, 768, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn0): BatchNorm2d(256, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
        (leaky_relu): LeakyReLU(negative_slope=0.1)
      )
      (batch_norm_conv): BatchNormBlock(in_feat: 256, momentum: 0.020, only_bias: False)
      (unary2): UnaryBlock(in_feat: 256, out_feat: 1024, BN: True, ReLU: False)
      (unary_shortcut): UnaryBlock(in_feat: 512, out_feat: 1024, BN: True, ReLU: False)
      (leaky_relu): LeakyReLU(negative_slope=0.1)
    )
    (10): AdaptResnetBottleneckBlock(
      (unary1): UnaryBlock(in_feat: 1024, out_feat: 256, BN: True, ReLU: True)
      (AdaptConv): AdaptiveConv(
        (conv0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (conv1): Conv2d(256, 768, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn0): BatchNorm2d(256, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
        (leaky_relu): LeakyReLU(negative_slope=0.1)
      )
      (batch_norm_conv): BatchNormBlock(in_feat: 256, momentum: 0.020, only_bias: False)
      (unary2): UnaryBlock(in_feat: 256, out_feat: 1024, BN: True, ReLU: False)
      (unary_shortcut): Identity()
      (leaky_relu): LeakyReLU(negative_slope=0.1)
    )
    (11): AdaptResnetBottleneckBlock(
      (unary1): UnaryBlock(in_feat: 1024, out_feat: 256, BN: True, ReLU: True)
      (AdaptConv): AdaptiveConv(
        (conv0): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (conv1): Conv2d(256, 768, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn0): BatchNorm2d(256, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
        (leaky_relu): LeakyReLU(negative_slope=0.1)
      )
      (batch_norm_conv): BatchNormBlock(in_feat: 256, momentum: 0.020, only_bias: False)
      (unary2): UnaryBlock(in_feat: 256, out_feat: 1024, BN: True, ReLU: False)
      (unary_shortcut): Identity()
      (leaky_relu): LeakyReLU(negative_slope=0.1)
    )
    (12): AdaptResnetBottleneckBlock(
      (unary1): UnaryBlock(in_feat: 1024, out_feat: 512, BN: True, ReLU: True)
      (AdaptConv): AdaptiveConv(
        (conv0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (conv1): Conv2d(512, 1536, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn0): BatchNorm2d(512, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
        (leaky_relu): LeakyReLU(negative_slope=0.1)
      )
      (batch_norm_conv): BatchNormBlock(in_feat: 512, momentum: 0.020, only_bias: False)
      (unary2): UnaryBlock(in_feat: 512, out_feat: 2048, BN: True, ReLU: False)
      (unary_shortcut): UnaryBlock(in_feat: 1024, out_feat: 2048, BN: True, ReLU: False)
      (leaky_relu): LeakyReLU(negative_slope=0.1)
    )
    (13): AdaptResnetBottleneckBlock(
      (unary1): UnaryBlock(in_feat: 2048, out_feat: 512, BN: True, ReLU: True)
      (AdaptConv): AdaptiveConv(
        (conv0): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (conv1): Conv2d(512, 1536, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn0): BatchNorm2d(512, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.02, affine=True, track_running_stats=True)
        (leaky_relu): LeakyReLU(negative_slope=0.1)
      )
      (batch_norm_conv): BatchNormBlock(in_feat: 512, momentum: 0.020, only_bias: False)
      (unary2): UnaryBlock(in_feat: 512, out_feat: 2048, BN: True, ReLU: False)
      (unary_shortcut): Identity()
      (leaky_relu): LeakyReLU(negative_slope=0.1)
    )
  )
  (decoder_blocks): ModuleList(
    (0): NearestUpsampleBlock(layer: 4 -> 3)
    (1): UnaryBlock(in_feat: 3072, out_feat: 1024, BN: True, ReLU: True)
    (2): NearestUpsampleBlock(layer: 3 -> 2)
    (3): UnaryBlock(in_feat: 1536, out_feat: 512, BN: True, ReLU: True)
    (4): NearestUpsampleBlock(layer: 2 -> 1)
    (5): UnaryBlock(in_feat: 768, out_feat: 256, BN: True, ReLU: True)
    (6): NearestUpsampleBlock(layer: 1 -> 0)
    (7): UnaryBlock(in_feat: 384, out_feat: 128, BN: True, ReLU: True)
  )
  (head_mlp): UnaryBlock(in_feat: 128, out_feat: 128, BN: False, ReLU: True)
  (head_softmax): UnaryBlock(in_feat: 128, out_feat: 13, BN: False, ReLU: True)
  (criterion): CrossEntropyLoss()
  (l1): L1Loss()
)
